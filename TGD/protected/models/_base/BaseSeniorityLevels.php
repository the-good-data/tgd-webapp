<?php

/**
 * This is the model base class for the table "{{seniority_levels}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SeniorityLevels".
 *
 * Columns in table "{{seniority_levels}}" available as properties of the model,
 * followed by relations of table "{{seniority_levels}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $level
 * @property string $color
 * @property string $icon
 * @property string $percentile
 * @property string $type
 * @property string $created_at
 * @property string $updated_at
 *
 * $type 1 - for guest, 2 - for member, 3 - manually set (not calculated)
 */
abstract class BaseSeniorityLevels extends GxActiveRecord {

    public $image;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{seniority_levels}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Seniority Levels|Seniority Levels', $n);
	}

	public static function representingColumn() {
		return 'level';
	}

	public function rules() {
		return array(
			array('level, color', 'required'),
			array('percentile, type', 'numerical', 'integerOnly'=>true),
			array('level, color, icon', 'length', 'max'=>128),
			array('created_at, updated_at, icon', 'safe'),
            array('image', 'length', 'max' => 128, 'tooLong' => '{attribute} is too long (max {max} chars).'),
            array('image', 'file', 'types' => 'jpg,jpeg,gif,png', 'allowEmpty'=>true, 'maxSize' => 1024 * 1024 * 2, 'tooLarge' => 'Size should be less then 2MB'),

			array('id, level, color, icon, percentile, type, created_at, updated_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
        );
	}

	public function pivotModels() {
		return array(
		);
	}

    public static function itemAlias($type,$code=NULL) {
        $_items = array(
            'Type' => array(
                '1' => Yii::t('app', 'Guest'),
                '2' => Yii::t('app', 'Member'),
                '3' => Yii::t('app', 'Manually'),
            ),
        );
        if (isset($code))
            return isset($_items[$type][$code]) ? $_items[$type][$code] : false;
        else
            return isset($_items[$type]) ? $_items[$type] : false;
    }

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'level' => Yii::t('app', 'Level'),
			'color' => Yii::t('app', 'Color'),
			'icon' => Yii::t('app', 'Icon'),
			'percentile' => Yii::t('app', 'Percentile'),
			'type' => Yii::t('app', 'Type'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('level', $this->level, true);
		$criteria->compare('color', $this->color, true);
		$criteria->compare('icon', $this->icon, true);
		$criteria->compare('percentile', $this->percentile);
		$criteria->compare('type', $this->type);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
            'sort'=>array(
                'defaultOrder'=>'id',
            ),
		));
	}
}